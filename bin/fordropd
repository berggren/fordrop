#!/usr/bin/env python
import json
import logging
import sleekxmpp
from sleekxmpp.xmlstream.jid import JID
import sys
from fordrop.activitystreams import is_activity

logging.basicConfig(level=logging.ERROR, format="%(levelname)-8s %(message)s")
class FordropXmpp(sleekxmpp.ClientXMPP):
    def __init__(self, jid, password, verbose=False, priority=0, plugins=[]):
        sleekxmpp.ClientXMPP.__init__(self, jid.full, password)
        self.jid = jid.full
        self.priority = priority
        self.verbose = verbose
        self.register_plugin('xep_0004')
        self.register_plugin('xep_0030')
        self.register_plugin('xep_0060')
        self.add_event_handler("session_start", self.start)
        self.plugins = plugins
        self.active_plugins = {}
        for plugin in self.plugins:
            self.active_plugins[plugin] = __import__('fordrop.plugins.%s' % plugin, fromlist=['plugins'])

    def run(self, server, threaded=False):
        self.verbose_print("==> Connecting to %s as %s.." % (server, self.jid))
        self.connect((server, 5222))
        self.process(threaded=threaded)

    def start(self, event):
        self.verbose_print("==> Connected!")
        self.verbose_print("==> Fetching roster")
        self.get_roster()
        self.verbose_print("==> Send priority %i for this connection" % self.priority)
        self.send_presence(ppriority=self.priority)
        xmpp.add_handler("<message xmlns='jabber:client'><event xmlns='http://jabber.org/protocol/pubsub#event' /></message>", xmpp.pubsub_event_handler, name='Pubsub Event')

    def pubsub_event_handler(self, xml):
        for item in xml.findall('{http://jabber.org/protocol/pubsub#event}event/{http://jabber.org/protocol/pubsub#event}items/{http://jabber.org/protocol/pubsub#event}item'):
            for event in item.getiterator('{http://jabber.org/protocol/pubsub#event}event'):
                activity = json.loads(event.text)
                if is_activity(activity):
                    for name, plugin in self.active_plugins.items():
                        plugin.plugin(activity)

    def verbose_print(self, msg):
        if self.verbose:
            print msg

if __name__ == "__main__" :
    import ConfigParser
    from optparse import OptionParser
    try:
        config = ConfigParser.ConfigParser()
        config.read('/etc/fordrop.cfg')
        parser = OptionParser(version="%prog 0.1")
        parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=config.getboolean("fordrop", "verbose"))
        parser.add_option('-j', '--jid', action='store', dest='jid', default=config.get("fordrop", "jid"))
        parser.add_option('-p', '--password', action='store', dest='password', default=config.get("fordrop", "password"))
        parser.add_option('-s', '--server', action='store', dest='server', help='XMPP server', default=config.get("fordrop", "server"))
        parser.add_option('-u', '--pubsub', action='store', dest='pubsub', help='Pubsub service, ex pubsub.example.com', default=config.get("fordrop", "pubsub"))
        parser.add_option('-l', '--log', action='store_true', dest='log', help='Log to syslog', default=config.getboolean("fordrop", "log"))
        parser.add_option('--no-events', action='store_true', dest='no_events', help=("Don't process pubsub events"), default=config.getboolean("fordrop", "no_events"))
        parser.add_option('-o', '--priority', action='store', type="int", dest='priority', help='Priority for this connection', default=config.getint("fordrop", "priority"))
        (options, args) = parser.parse_args()
    except ConfigParser.NoSectionError:
        sys.exit(1)
    jid = JID(options.jid)
    xmpp = FordropXmpp(jid, options.password, options.verbose, options.priority, plugins=config.get('fordrop', 'plugins').split(','))
    xmpp.run(options.server)
